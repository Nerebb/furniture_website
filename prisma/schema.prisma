// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Gender {
  male
  female
  others
}

enum Role {
  admin
  creator
  customer
  shiper
  guest
}

enum Status {
  orderCanceled
  pendingPayment
  processingOrder
  shipping
  completed
}

model Color {
  hex   String @id @db.VarChar(6)
  label String

  @@map("color")
}

model Category {
  id       Int       @id @default(autoincrement())
  label    String    @unique @db.VarChar(20)
  products Product[]

  @@map("category")
}

model Room {
  id       Int       @id @default(autoincrement())
  label    String    @unique @db.VarChar(20)
  products Product[]

  @@map("room")
}

model MediaGallery {
  id       Int       @id @default(autoincrement())
  imageUrl String    @unique @db.VarChar(255)
  products Product[]

  @@map("mediagallery")
}

model Account {
  id     String @id @default(uuid())
  userId String

  //LoginType: Credentials - Oauth
  type String

  //Credentials
  loginId  String? @unique
  password String?

  //Sign-On
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model User {
  id String @id @default(uuid())

  //Data assign after access OAuth
  address     String?
  nickName    String?   @unique
  role        Role      @default(customer)
  gender      Gender    @default(others)
  phoneNumber String?   @unique
  birthDay    DateTime? @db.Date //yyyy-MM-dd
  createdDate DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  //MiddleWare confirmation
  userVerified DateTime?
  deleted      DateTime?

  //UserInteractions
  productsReviewed ProductReview[] @relation("productReview")
  reviewLiked      ProductReview[] @relation("reviewLikes")

  //Products Manage
  writedContents Product[]     @relation("writedContent")
  wishlist       Wishlist?
  shoppingCart   ShoppingCart?
  carts          Order[]
  // shiped        Order[]    @relation("shiped")

  //Data received from OAuth
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Product {
  id          String  @id @default(uuid())
  name        String  @unique @db.VarChar(20)
  description String? @db.Text
  price       Int     @default(0) @db.Int
  available   Int     @default(0) @db.Int

  //Database queries
  JsonColor        Json
  isFeatureProduct Boolean        @default(false)
  cateIds          Category[]
  roomIds          Room[]
  imageIds         MediaGallery[]

  //User
  creator   User   @relation("writedContent", fields: [creatorId], references: [id])
  creatorId String

  avgRating     Int @default(0) @db.UnsignedTinyInt
  totalSale     Int @default(0) @db.UnsignedInt
  totalRating   Int @default(0) @db.UnsignedInt
  totalComments Int @default(0) @db.UnsignedInt

  reviews ProductReview[] @relation("productReview")

  //Softdelete
  deleted DateTime?

  //Time
  createdDate DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //Relation
  shoppingCartItems ShoppingCartItem[]
  wishlists         Wishlist[]

  @@index([creatorId])
  @@map("product")
}

model ProductReview {
  id String @id @default(uuid())

  // relation
  owner      User    @relation("productReview", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  product    Product @relation("productReview", fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  likedUsers User[]  @relation("reviewLikes")
  totalLike  Int     @db.UnsignedInt

  content   String  @db.Text
  rating    Int     @db.UnsignedTinyInt
  isPending Boolean @default(true)

  createdDate DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([ownerId, productId])
  @@index([ownerId])
  @@index([productId])
  @@map("productreview")
}

model Wishlist {
  id String @id @default(uuid())

  //relation
  ownerId  String    @unique
  user     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products Product[]

  @@index([ownerId])
  @@map("wishlist")
}

model ShoppingCart {
  id               String             @id @default(uuid())
  owner            User               @relation(fields: [ownerId], references: [id])
  ownerId          String             @unique
  subTotal         BigInt
  //relation
  shoppingCartItem ShoppingCartItem[]

  @@index([ownerId])
  @@map("shoppingcart")
}

model ShoppingCartItem {
  id             String       @id @default(uuid())
  ShoppingCart   ShoppingCart @relation(fields: [ShoppingCartId], references: [id], onDelete: Cascade)
  ShoppingCartId String

  color      String
  quantities Int    @db.SmallInt

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([productId])
  @@index([ShoppingCartId])
  @@map("shoppingcartitem")
}

model Order {
  id              String @id @default(uuid())
  subTotal        BigInt
  shippingFee     Int
  total           BigInt
  billingAddress  String @db.VarChar(255)
  shippingAddress String @db.VarChar(255)
  status          Status @default(pendingPayment)

  //Relation
  owner           User        @relation(fields: [ownerId], references: [id])
  ownerId         String
  orderedProducts OrderItem[]
  // shiper   User?       @relation("shiped", fields: [shiperId], references: [id], onDelete: SetNull)
  // shiperId String?

  //DateTime
  createdDate DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId])
  @@map("order")
}

model OrderItem {
  id String @id @default(uuid())

  //Stored to kept info
  salePrice  Int
  quantities Int   @db.SmallInt
  color      Json? //{id,quantities}[]

  //relation
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  // productName String  @unique

  //DateTime
  createdDate DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
  @@index([orderId])
  @@map("orderitem")
}
