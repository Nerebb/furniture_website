generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  loginId           String? @unique(map: "Account_loginId_key")
  password          String?
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model category {
  id      Int       @id @default(autoincrement())
  label   String    @unique(map: "Category_label_key") @db.VarChar(20)
  product product[] @relation("categorytoproduct")
}

model color {
  hex   String @id @db.VarChar(6)
  label String
}

model mediagallery {
  id       Int       @id @default(autoincrement())
  imageUrl String    @unique(map: "MediaGallery_imageUrl_key") @db.VarChar(255)
  product  product[] @relation("mediagallerytoproduct")
}

model order {
  id              String       @id
  subTotal        BigInt
  shippingFee     Int
  total           BigInt
  billingAddress  String       @db.VarChar(255)
  shippingAddress String       @db.VarChar(255)
  status          order_status @default(pendingPayment)
  ownerId         String
  createdDate     DateTime     @default(now())
  updatedAt       DateTime
  user            user         @relation(fields: [ownerId], references: [id], map: "Order_ownerId_fkey")
  orderitem       orderitem[]

  @@index([ownerId], map: "Order_ownerId_fkey")
}

model orderitem {
  id          String   @id
  salePrice   Int
  quantities  Int      @db.SmallInt
  color       Json?
  orderId     String
  productId   String
  createdDate DateTime @default(now())
  updatedAt   DateTime
  order       order    @relation(fields: [orderId], references: [id], map: "OrderItem_orderId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
}

model product {
  id               String             @id
  name             String             @unique(map: "Product_name_key") @db.VarChar(20)
  description      String?            @db.Text
  price            Int                @default(0)
  available        Int                @default(0)
  JsonColor        Json
  isFeatureProduct Boolean            @default(false)
  creatorId        String
  avgRating        Int                @default(0) @db.UnsignedTinyInt
  totalSale        Int                @default(0) @db.UnsignedInt
  totalRating      Int                @default(0) @db.UnsignedInt
  totalComments    Int                @default(0) @db.UnsignedInt
  deleted          DateTime?
  createdDate      DateTime           @default(now())
  updatedAt        DateTime
  user             user               @relation(fields: [creatorId], references: [id], map: "Product_creatorId_fkey")
  productcomment   productcomment[]
  productrating    productrating[]
  shoppingcartitem shoppingcartitem[]
  category         category[]         @relation("categorytoproduct")
  mediagallery     mediagallery[]     @relation("mediagallerytoproduct")
  room             room[]             @relation("producttoroom")
  wishlist         wishlist[]         @relation("producttowishlist")

  @@index([creatorId], map: "Product_creatorId_fkey")
}

model productcomment {
  id                                String  @id
  content                           String  @db.Text
  ownerId                           String
  productId                         String
  user_productcomment_ownerIdTouser user    @relation("productcomment_ownerIdTouser", fields: [ownerId], references: [id], onDelete: Cascade, map: "ProductComment_ownerId_fkey")
  product                           product @relation(fields: [productId], references: [id], map: "ProductComment_productId_fkey")
  user_usersliked                   user[]  @relation("usersliked")

  @@index([ownerId], map: "ProductComment_ownerId_fkey")
  @@index([productId], map: "ProductComment_productId_fkey")
}

model productrating {
  id        String  @id
  rating    Int     @db.UnsignedTinyInt
  productId String
  ownerId   String
  user      user    @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "ProductRating_ownerId_fkey")
  product   product @relation(fields: [productId], references: [id], map: "ProductRating_productId_fkey")

  @@index([ownerId], map: "ProductRating_ownerId_fkey")
  @@index([productId], map: "ProductRating_productId_fkey")
}

model room {
  id      Int       @id @default(autoincrement())
  label   String    @unique(map: "Room_label_key") @db.VarChar(20)
  product product[] @relation("producttoroom")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model shoppingcart {
  id               String             @id
  ownerId          String             @unique(map: "ShoppingCart_ownerId_key")
  subTotal         BigInt
  user             user               @relation(fields: [ownerId], references: [id], map: "ShoppingCart_ownerId_fkey")
  shoppingcartitem shoppingcartitem[]
}

model shoppingcartitem {
  id             String       @id
  ShoppingCartId String
  color          String
  quantities     Int          @db.SmallInt
  productId      String
  shoppingcart   shoppingcart @relation(fields: [ShoppingCartId], references: [id], onDelete: Cascade, map: "ShoppingCartItem_ShoppingCartId_fkey")
  product        product      @relation(fields: [productId], references: [id], map: "ShoppingCartItem_productId_fkey")

  @@index([ShoppingCartId], map: "ShoppingCartItem_ShoppingCartId_fkey")
  @@index([productId], map: "ShoppingCartItem_productId_fkey")
}

model user {
  id                                          String           @id
  address                                     String?
  nickName                                    String?          @unique(map: "User_nickName_key")
  role                                        user_role        @default(customer)
  gender                                      user_gender      @default(others)
  phoneNumber                                 String?          @unique(map: "User_phoneNumber_key")
  birthDay                                    DateTime?        @db.Date
  createdDate                                 DateTime         @default(now())
  updatedAt                                   DateTime
  userVerified                                DateTime?
  deleted                                     DateTime?
  name                                        String?
  email                                       String?          @unique(map: "User_email_key")
  emailVerified                               DateTime?
  image                                       String?
  account                                     account[]
  order                                       order[]
  product                                     product[]
  productcomment_productcomment_ownerIdTouser productcomment[] @relation("productcomment_ownerIdTouser")
  productrating                               productrating[]
  session                                     session[]
  shoppingcart                                shoppingcart?
  wishlist                                    wishlist?
  productcomment_usersliked                   productcomment[] @relation("usersliked")
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model wishlist {
  id      String    @id
  ownerId String    @unique(map: "Wishlist_ownerId_key")
  user    user      @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "Wishlist_ownerId_fkey")
  product product[] @relation("producttowishlist")
}

enum user_role {
  admin
  creator
  customer
  shiper
}

enum user_gender {
  male
  female
  others
}

enum order_status {
  orderCanceled
  pendingPayment
  processingOrder
  shipping
  completed
}
