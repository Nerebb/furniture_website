// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  others
}

enum Role {
  admin
  creator
  customer
  shiper
}

enum Status {
  pendingPayment
  processingOrder
  shipping
  completed
}

model Color {
  hex  String @id @db.VarChar(6)
  name String
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(20)
  product Product[]
}

model Room {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(20)
  product Product[]
}

model MediaGallery {
  id       Int       @id @default(autoincrement())
  imageUrl String    @unique @db.VarChar(255)
  product  Product[]
}

model Account {
  id     String @id @default(uuid())
  userId String

  //LoginType: Credentials - Oauth
  type String

  //Credentials
  loginId  String? @unique
  password String?

  //Sign-On
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id String @id @default(uuid())

  //Data assign after access OAuth
  address     String?
  nickName    String?   @unique
  role        Role      @default(customer)
  gender      Gender    @default(others)
  phoneNumber String?   @unique
  birthDay    DateTime? @db.Date
  createdDate DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  //MiddleWare confirmation
  userVerified DateTime?
  deleted      DateTime?

  //UserInteractions
  comments      ProductComment[] @relation("userComments")
  commentsliked ProductComment[] @relation("userLiked")
  productsRated ProductRating[]  @relation("userRated")

  //Products Manage
  writedContent Product[]
  wishList      Wishlist[]
  cart          Order[]
  // shiped        Order[]    @relation("shiped")

  //Data received from OAuth
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String @id @default(uuid())
  name        String @db.VarChar(20)
  description String @db.Text
  price       Int
  available   Int    @db.Int

  //Database queries
  JsonColor Json?
  category  Category[]
  room      Room[]
  image     MediaGallery[]

  //User
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  rating   ProductRating[]  @relation("productRated")
  comments ProductComment[] @relation("productComment")

  //Softdelete
  deleted DateTime?

  //Time
  createdDate DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  wishlist    Wishlist[]
}

model ProductComment {
  id      String @id @default(uuid())
  content String @db.Text

  //relation
  owner     User    @relation("userComments", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  userLiked User[]  @relation("userLiked")
  product   Product @relation("productComment", fields: [productId], references: [id])
  productId String
}

model ProductRating {
  id        String  @id @default(uuid())
  rating    Int     @db.UnsignedTinyInt
  product   Product @relation("productRated", fields: [productId], references: [id])
  productId String
  owner     User    @relation("userRated", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
}

model Wishlist {
  id String @id @default(uuid())

  //relation
  ownerId  String
  user     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products Product[]
}

model Order {
  id              String @id @default(uuid())
  subTotal        BigInt
  shippingFee     Int
  total           BigInt
  billingAddress  String @db.VarChar(255)
  shippingAddress String @db.VarChar(255)
  status          Status @default(pendingPayment)

  //Relation
  owner   User        @relation(fields: [ownerId], references: [id])
  ownerId String
  product OrderItem[] @relation()
  // shiper   User?       @relation("shiped", fields: [shiperId], references: [id], onDelete: SetNull)
  // shiperId String?
}

model OrderItem {
  id String @id @default(uuid())

  //Stored to kept info
  salePrice  Int
  quantities Int   @db.SmallInt
  color      Json? //{hex,quantities}[]

  //relation
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}
